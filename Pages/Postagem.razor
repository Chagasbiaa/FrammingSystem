@page "/Postagem"
@using Newtonsoft.Json;
@using System;
@using System.Net.Http;
@using System.Text;
@using System.Text.Json;
@inject HttpClient HttpClient
@using Microsoft.AspNetCore.WebUtilities;
@using System.Threading.Tasks;
@inject NavigationManager NavigationManager

@inject IHttpClientFactory ClientFactory

<PageTitle>Usuários</PageTitle>
<body>
<style>
 @@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;800&display=swap');

</style>
    <main>
        <div class="container_pesquisa">
            <button id="button_home">
                <a href="ferqyfq.html">
                    <img src="/images/icon_home.png">
                </a>
            </button>

            <button id="button_notificacao">
                <a href="ferqyfq.html">
                    <img src="/images/icon_notificacao.png">
                </a>

            </button>

            <div id="div_identificacao">
                <img src="/images/Chagasperfil.png">
                <p>Beatriz Chagas</p>
                <div id="div_indifica_role">
                     <p>Administrador</p>
                </div>
            </div>

            <div id="divBusca">
                <input type="text" id="txtBusca"  @oninput="FilterPostagens" >
                <img id="imgBusca" src="/images/lupapesquisa.png" width="30px" alt="Buscar">
            </div>
        </div>

        <div class="container_menu_content">
            <div class="container_menu">
                <nav class="menu">
                    <img id="framming_logo_menu" src="/images/framminglogo.png" />
                    <ul>
                        <div class="menu_container">
                            <button id="button_cliente_menu">
                        <li><a href="cad_func"><img src="/images/icon_cliente.png"></a></li></button>
                        <button id="button_mensagens_menu">
                        <li><a href="ListaPostagem"><img src="/images/icon_mensagens.png"></a></li></button>
                        <button id="button_identificacao_menu">
                        <li><a href="ListaPostagem"><img src="/images/icon_identificacao.png"></a></li></button>
                        <button id="button_theater_menu">
                        <li><a href="Cad_cinema"><img src="/images/theater.png"></a></li></button>
                        </div>
                    </ul>
            <ul>
                <div class="buttons_sair_configuracao">
                    <button id="button_sair_menu">
                <li><a href="Login"><img src="/images/icon_saida.png"></a></li></button>
                <button id="button_configuracao_menu">
                <li><a href="#"><img src="/images/configuracao.png"></a></li></button>
        </div>
        </ul>
        </nav>
        </div>

        </div>
        <div class="container_content">
            <div class="container_main">
                <div class="codigo_cinema">
                    <img id="foto_codigo_func" src="/images/icon_identifica_func.png" />
                 
                </div>

            </div>
        </div>

        <div id="divBuscaPostagem">
            <input type="text" id="txtBuscaPostagem">
            <img id="imgBusca" src="/images/lupapesquisa.png" width="30px id="btnBusca" alt="Buscar">
        </div>
        <div id="resultado_pesquisa">

            <style> /*fé na mãe adriel ellipse lipe!*/
                #resultado_pesquisa {
                    display: none;
                    margin-top: 133px;
                    padding: 10px;
                    border: 1px solid #ccc;
                }
            </style>

            <div class="pink_line">
                <div class="rotulos_pesquisa">
                </div>

            </div>
            <p id="data_post">Data:</p>
            <p id="denuncia_post">Denúncias:</p>
            <p id="filme_post">Filme:</p>
            <p id="post_result">
                Lorem Ipsum is simply dummy text of
                the printing and typesetting industry. Lorem Ipsum hasa
                been the industry's standard dummy text ever since the
                1500s, when an
            </p>

            <button id="excluir_post">Excluir Postagem</button>
        </div>


            
            <div class="rotulos_usuarios">
                 <img id="foto_codigo_func" src="/images/icon_identifica_func.png" />
                <p class="beatriz">Nome: @nomeUsuario</p>
                <p class="beatriz">Email: @emailUsuario</p>
                <p class="beatriz">Usuário: @nickUsuario</p>
                <div class="gap"></div>
            </div>

            <div class="inner-div">
                @foreach (var postagem in Postagens)
            {
            <div class="critica">
                 <div class="line-users"></div>
                <p>Id do Filme: </p><h1>  @postagem.idFilme</h1><br>
                <p>Critica: </p><h1>  @postagem.textoCritica</h1><br>
               <p>Data da Publicação: </p><h1> @postagem.dataCritica.ToShortDateString()</h1><br>
                <p>Quantidade de estrelas: </p><h1>  @postagem.notaCritica</h1>
                 <button class="excluir_usu" @onclick="() => ExcluirPostagem(postagem.idFilme)"><p>Excluir Postagem</p></button>
            </div>
            }
                
                    </div>
                   
            
    </main>
</body>
@code {

   private string idUsuario;
   private List<PostagemModel> Postagens { get; set; } = new();

   // Defina as variáveis aqui
   private string nomeUsuario;
   private string emailUsuario;
   private string nickUsuario;

   public class UserModel
   {
       public string nomeUsuario { get; set; }
       public string emailUsuario { get; set; }
       public string nickUsuario { get; set; }
   }

protected override async Task OnInitializedAsync()
{
   var uri = new Uri(NavigationManager.Uri);
   var query = QueryHelpers.ParseQuery(uri.Query);

   if (query.TryGetValue("idUsuario", out var idUsuarioQuery))
   {
       idUsuario = idUsuarioQuery.FirstOrDefault();
   }

   await GetUserData();
   await GetPostagens();
}

private async Task GetUserData()
{
   var response = await HttpClient.GetAsync($"https://framming-api.onrender.com/users/{idUsuario}");
   response.EnsureSuccessStatusCode();
   var responseBody = await response.Content.ReadAsStringAsync();

   var user = JsonConvert.DeserializeObject<UserModel>(responseBody);

   // Exibir os dados do usuário
   nomeUsuario = user.nomeUsuario;
   emailUsuario = user.emailUsuario;
   nickUsuario = user.nickUsuario;
}

private async Task GetPostagens()
{
  var response = await HttpClient.GetAsync($"https://framming-api.onrender.com/feedback/{idUsuario}");
  response.EnsureSuccessStatusCode();
  var responseBody = await response.Content.ReadAsStringAsync();

  Postagens = JsonConvert.DeserializeObject<List<PostagemModel>>(responseBody);
}

  public class PostagemModel
  {
      public string idFilme { get; set; }
      public string textoCritica { get; set; }
      public DateTime dataCritica { get; set; }
      public string notaCritica { get; set; }
  }
   private string SearchString { get; set; }

   private void FilterPostagens(ChangeEventArgs e)
{
   SearchString = e.Value.ToString();
   Postagens = Postagens.Where(p => p.textoCritica.Contains(SearchString)).ToList();
}

    public List<FuncModel> Users  { get; set; } = new();
    public class FuncModel 
    {
        public string idUsuario;
        public string nickUsuario;
        public string nomeUsuario;
        public string emailUsuario;
        public string tokenCinema;

        public string tipoUsuario;
    }
  bool ShowMessage = false;
   bool ShowMessage2 = false;

  private void ExcluirPostagem(string idFeedback)
{
   var postagem = Postagens.FirstOrDefault(p => p.idFilme == idFeedback);
   if (postagem != null)
   {
       Postagens.Remove(postagem);
   }
}

}



